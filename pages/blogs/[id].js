import Head from "next/head";
import Image from "next/image";
import Link from "next/link";

import { client } from "../../libs/client";

const BlogId = ({ blog }) => {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
      </Head>
      <div>
        <nav>
          <h1>
            <Link href="/">
              <a>PORTFORIO</a>
            </Link>
          </h1>
        </nav>
        {/* タイトル */}
        <h2>{blog.title}</h2>
        <span>{blog.category.name}</span>
        {/* コンセプト */}
        <picture>
          <Image
            src={blog.eyecatch.url}
            alt="作品の画像1"
            width={896}
            height={504}
          />
        </picture>
        <h4>CONCEPT</h4>
        <h3>{blog.conceptHeading}</h3>
        <p>{blog.conceptText}</p>
        {/* プロセス */}
        {blog?.processImage?.url !== undefined && (
          <picture>
            <Image
              src={blog?.processImage?.url}
              alt="作品の画像1"
              width={896}
              height={504}
            />
          </picture>
        )}

        {blog.processHeading !== undefined && (
          <h4>PROCESS</h4>
        )}
        <h3>{blog.processHeading}</h3>
        <p>{blog.processText}</p>
        {/* メッセージ */}
        {blog?.messageImage?.url !== undefined && (
          <picture>
            <Image
              src={blog?.messageImage?.url}
              alt="作品の画像1"
              width={896}
              height={504}
            />
          </picture>
        )}
        {blog.messageHeading !== undefined && (
          <h4>MESSAGE</h4>
        )}
        <h3>{blog.messageHeading}</h3>
        <p>{blog.messageText}</p>
      </div>
    </div>
  );
}

export default BlogId

// 静的生成のためのパスを指定します
export const getStaticPaths = async () => {
  const data = await client.get({ endpoint: "blogs" });

  const paths = data.contents.map((content) => `/blogs/${content.id}`);
  return { paths, fallback: false };
};

// データをテンプレートに受け渡す部分の処理を記述します
export const getStaticProps = async (context) => {
  const id = context.params.id;
  const data = await client.get({ endpoint: "blogs", contentId: id });

  return {
    props: {
      blog: data,
    },
  };
};