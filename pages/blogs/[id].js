// pages/blogs/[id].js
import { client } from "../../libs/client";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import styles from "../../styles/Home.module.css";

export default function BlogId({ blog }) {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link
          href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;700&family=Oswald:wght@300&display=swap"
          rel="stylesheet"
        />
      </Head>
      <div className={styles.wrapper}>
        <nav className={styles.navigation}>
          <h1 className={styles.headerTitle}>
            <Link href="/">
              <a>PORTFORIO</a>
            </Link>
          </h1>
          <ul className={styles.snsIcons}>
            <li className={styles.snsIcon_twitter}>
              <Link href="https://twitter.com/?lang=ja">
                <a>Twitter</a>
              </Link>
            </li>
            <li className={styles.snsIcon_instagram}>
              <Link href="https://www.instagram.com/">
                <a>Instagram</a>
              </Link>
            </li>
          </ul>
        </nav>
        {/* タイトル */}
        <h2 className={styles.contentTitle}>{blog.title}</h2>
        <span className={styles.contentCategory}>{blog.category.name}</span>
        {/* コンセプト */}
        <picture className={styles.img_1colum}>
          <Image
            className={styles.img_1colum}
            src={blog.eyecatch.url}
            alt="作品の画像1"
            width={896}
            height={504}
          />
        </picture>
        <h4 className={styles.sectionTitle}>CONCEPT</h4>
        <h3 className={styles.sectionHeading}>{blog.conceptHeading}</h3>
        <p className={styles.body}>{blog.conceptText}</p>
        {/* プロセス */}
        {blog?.processImage?.url !== undefined && (
          <picture className={styles.img_1colum}>
            <Image
              src={blog?.processImage?.url}
              alt="作品の画像1"
              width={896}
              height={504}
            />
          </picture>
        )}

        {blog.processHeading !== undefined && (
          <h4 className={styles.sectionTitle}>PROCESS</h4>
        )}
        <h3 className={styles.sectionHeading}>{blog.processHeading}</h3>
        <p>{blog.processText}</p>
        {/* メッセージ */}
        {blog?.messageImage?.url !== undefined && (
          <picture className={styles.img_1colum}>
            <Image
              src={blog?.messageImage?.url}
              alt="作品の画像1"
              width={896}
              height={504}
            />
          </picture>
        )}
        {blog.messageHeading !== undefined && (
          <h4 className={styles.sectionTitle}>MESSAGE</h4>
        )}
        <h3 className={styles.sectionHeading}>{blog.messageHeading}</h3>
        <p className={styles.body}>{blog.messageText}</p>
      </div>
    </div>
  );
}

// 静的生成のためのパスを指定します
export const getStaticPaths = async () => {
  const data = await client.get({ endpoint: "blogs" });

  const paths = data.contents.map((content) => `/blogs/${content.id}`);
  return { paths, fallback: false };
};

// データをテンプレートに受け渡す部分の処理を記述します
export const getStaticProps = async (context) => {
  const id = context.params.id;
  const data = await client.get({ endpoint: "blogs", contentId: id });

  return {
    props: {
      blog: data,
    },
  };
};